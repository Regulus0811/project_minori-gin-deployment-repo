definitions:
  dto.ClassBoardUpdateDTO:
    properties:
      content:
        type: string
      id:
        type: integer
      image:
        type: string
      is_announced:
        type: boolean
      title:
        type: string
    required:
    - id
    type: object
  dto.ClassScheduleDTO:
    properties:
      cid:
        type: integer
      ended_at:
        type: string
      is_live:
        type: boolean
      started_at:
        type: string
      title:
        type: string
    required:
    - cid
    - ended_at
    - started_at
    - title
    type: object
  dto.UpdateClassScheduleDTO:
    properties:
      ended_at:
        type: string
      is_live:
        type: boolean
      started_at:
        type: string
      title:
        type: string
    type: object
  models.Class:
    properties:
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      limitation:
        type: integer
      name:
        type: string
    type: object
  models.ClassBoard:
    properties:
      cid:
        type: integer
      class:
        $ref: '#/definitions/models.Class'
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      image:
        type: string
      isAnnounced:
        type: boolean
      title:
        type: string
      uid:
        description: User ID
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ClassSchedule:
    properties:
      cid:
        type: integer
      class:
        $ref: '#/definitions/models.Class'
      endedAt:
        type: string
      id:
        type: integer
      isLive:
        type: boolean
      startedAt:
        type: string
      title:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /cb:
    get:
      consumes:
      - application/json
      description: cidに基づいて、グループの全ての掲示板を取得します。
      parameters:
      - description: クラスID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 全てのグループ掲示板のリスト
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassBoard'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: 全てのグループ掲示板を取得
      tags:
      - class_board
    post:
      consumes:
      - multipart/form-data
      description: Create a new class board with the provided information, including
        image upload.
      parameters:
      - description: Class board title
        in: formData
        name: title
        required: true
        type: string
      - description: Class board content
        in: formData
        name: content
        required: true
        type: string
      - description: Class ID
        in: formData
        name: cid
        required: true
        type: integer
      - description: User ID
        in: formData
        name: uid
        required: true
        type: integer
      - description: Is announced
        in: formData
        name: is_announced
        type: boolean
      - description: Upload image file
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Class board created successfully
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Create a new class board
      tags:
      - class_board
  /cb/{id}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板を削除します。
      parameters:
      - description: グループ掲示板ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: グループ掲示板が正常に削除されました
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: グループ掲示板を削除
      tags:
      - class_board
    get:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板の詳細を取得します。
      parameters:
      - description: グループ掲示板ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: グループ掲示板が取得されました
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: IDでグループ掲示板を取得
      tags:
      - class_board
    patch:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板の詳細を更新します。
      parameters:
      - description: グループ掲示板ID
        in: path
        name: id
        required: true
        type: integer
      - description: グループ掲示板の更新
        in: body
        name: class_board_update
        required: true
        schema:
          $ref: '#/definitions/dto.ClassBoardUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: グループ掲示板が正常に更新されました
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: グループ掲示板を更新
      tags:
      - class_board
  /cb/announced:
    get:
      consumes:
      - application/json
      description: cidに基づいて、公告されたグループの掲示板を取得します。
      parameters:
      - description: クラスID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 公告されたグループ掲示板のリスト
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassBoard'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: 公告されたグループ掲示板を取得
      tags:
      - class_board
  /cc/checkSecretExists:
    get:
      consumes:
      - application/json
      description: 指定されたグループコードにシークレットがあるかどうかをチェックする。
      parameters:
      - description: Code to check
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: secretExists" "シークレットが存在します
          schema:
            type: boolean
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
      summary: グループコードにシークレットが存在するかチェック
      tags:
      - class_code
  /cc/verifyClassCode:
    get:
      consumes:
      - application/json
      description: グループコードと、該当する場合はそのシークレットを確認する。また、指定されたユーザーに役割を割り当てる。
      parameters:
      - description: Code to verify
        in: query
        name: code
        required: true
        type: string
      - description: Secret for the code
        in: query
        name: secret
        type: string
      - description: User ID to assign role
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: グループコードが検証されました
          schema:
            type: string
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "401":
          description: シークレットが一致しません
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
      summary: グループコードとシークレットを検証＆ユーザーに役割を割り当てる
      tags:
      - class_code
  /cs:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDの全てのクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: 全てのクラススケジュールを取得
      tags:
      - class_schedule
    post:
      consumes:
      - application/json
      description: 新しいクラススケジュールを作成する。
      parameters:
      - description: Class schedule to create
        in: body
        name: classSchedule
        required: true
        schema:
          $ref: '#/definitions/dto.ClassScheduleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に作成されました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: クラススケジュールを作成
      tags:
      - class_schedule
  /cs/{id}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを削除する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に削除されました
          schema:
            type: string
        "400":
          description: 無効なID形式です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: クラススケジュールを削除
      tags:
      - class_schedule
    get:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを取得する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが見つかりました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: 無効なID形式です
          schema:
            type: string
        "404":
          description: クラススケジュールが見つかりません
          schema:
            type: string
      summary: IDでクラススケジュールを取得
      tags:
      - class_schedule
    put:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを更新する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class schedule to update
        in: body
        name: classSchedule
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateClassScheduleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に更新されました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: クラススケジュールを更新
      tags:
      - class_schedule
  /cs/date:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDと日付のクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: Date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 指定された日付のクラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "400":
          description: 日付が必要です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: 日付でクラススケジュールを取得
      tags:
      - class_schedule
  /cs/live:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDのライブ中のクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ライブ中のクラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      summary: ライブ中のクラススケジュールを取得
      tags:
      - class_schedule
  /example/helloworld:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: ping example
      tags:
      - example
swagger: "2.0"
