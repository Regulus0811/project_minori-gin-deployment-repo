definitions:
  controllers.UpdateUserNameRequest:
    properties:
      new_name:
        type: string
    type: object
  dto.ClassBoardUpdateDTO:
    properties:
      content:
        type: string
      id:
        type: integer
      image:
        type: string
      is_announced:
        type: boolean
      title:
        type: string
    required:
    - id
    type: object
  dto.ClassMemberDTO:
    properties:
      image:
        type: string
      nickname:
        type: string
      role:
        type: string
      uid:
        type: integer
    type: object
  dto.ClassScheduleDTO:
    properties:
      cid:
        type: integer
      ended_at:
        type: string
      is_live:
        type: boolean
      started_at:
        type: string
      title:
        type: string
    required:
    - cid
    - ended_at
    - started_at
    - title
    type: object
  dto.UpdateClassScheduleDTO:
    properties:
      ended_at:
        type: string
      is_live:
        type: boolean
      started_at:
        type: string
      title:
        type: string
    type: object
  dto.UserClassInfoDTO:
    properties:
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      is_favorite:
        type: boolean
      limitation:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  models.Attendance:
    properties:
      cid:
        description: Class ID
        type: integer
      classSchedule:
        $ref: '#/definitions/models.ClassSchedule'
      classUser:
        $ref: '#/definitions/models.ClassUser'
      csid:
        description: Class Schedule ID
        type: integer
      id:
        type: integer
      isAttendance:
        description: 出席, 遅刻, 欠席
        type: string
      uid:
        description: User ID
        type: integer
    type: object
  models.Class:
    properties:
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      limitation:
        type: integer
      name:
        type: string
      uid:
        type: integer
    type: object
  models.ClassBoard:
    properties:
      cid:
        type: integer
      class:
        $ref: '#/definitions/models.Class'
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      image:
        type: string
      isAnnounced:
        type: boolean
      title:
        type: string
      uid:
        description: User ID
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.ClassSchedule:
    properties:
      cid:
        type: integer
      class:
        $ref: '#/definitions/models.Class'
      endedAt:
        type: string
      id:
        type: integer
      isLive:
        type: boolean
      startedAt:
        type: string
      title:
        type: string
    type: object
  models.ClassUser:
    properties:
      cid:
        type: integer
      class:
        $ref: '#/definitions/models.Class'
      isFavorite:
        type: boolean
      nickname:
        type: string
      role:
        type: string
      uid:
        type: integer
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
      pid:
        type: string
    type: object
info:
  contact: {}
paths:
  /at/{cid}/{uid}/{csid}:
    post:
      consumes:
      - application/json
      description: 出席情報を作成または更新
      parameters:
      - description: Class ID
        in: path
        name: cid
        required: true
        type: integer
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: Class Schedule ID
        in: path
        name: csid
        required: true
        type: integer
      - description: Status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 作成または更新に成功しました
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 出席情報を作成または更新
      tags:
      - Attendance
  /at/{classID}:
    get:
      consumes:
      - application/json
      description: クラスの全ての出席情報を取得
      parameters:
      - description: Class ID
        in: path
        name: classID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attendance
          schema:
            items:
              $ref: '#/definitions/models.Attendance'
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラスの全ての出席情報を取得
      tags:
      - Attendance
  /at/attendance/{id}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDの出席情報を削除
      parameters:
      - description: Attendance ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: User ID
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 削除に成功しました
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 出席情報を削除
      tags:
      - Attendance
    get:
      consumes:
      - application/json
      description: 指定されたIDの出席情報を取得
      parameters:
      - description: Attendance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Attendance
          schema:
            $ref: '#/definitions/models.Attendance'
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 出席情報を取得
      tags:
      - Attendance
  /auth/google/login:
    get:
      description: ユーザーをGoogleのログインページへリダイレクトして認証を行います。
      operationId: google-login-handler
      produces:
      - text/html
      responses:
        "302":
          description: Googleのログインページへのリダイレクト
      summary: Googleのログインページへリダイレクトします。
      tags:
      - GoogleAuth
  /auth/google/process:
    post:
      consumes:
      - application/json
      description: ユーザーがGoogleログイン後に受け取った認可コードを使って、ユーザー情報を照会し、トークンを生成します。
      parameters:
      - description: Googleから受け取った認可コード
        in: body
        name: authCode
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: ユーザー情報及びトークン情報
          schema:
            additionalProperties: true
            type: object
      summary: 認可コードを処理します。
      tags:
      - GoogleAuth
  /auth/google/refresh-token:
    post:
      consumes:
      - application/json
      description: 提供されたリフレッシュトークンを使用してアクセストークンを更新します
      parameters:
      - description: リフレッシュトークン
        in: body
        name: refresh_token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: アクセストークンと有効期限が返されます
          schema:
            additionalProperties: true
            type: object
        "400":
          description: JSON形式が不正、またはリフレッシュトークンが提供されていない場合のエラー
          schema:
            additionalProperties: true
            type: object
        "401":
          description: リフレッシュトークンが無効または期限切れの場合の認証エラー
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 未処理のエラーによる内部サーバーエラー
          schema:
            additionalProperties: true
            type: object
      summary: アクセストークンの更新
      tags:
      - GoogleAuth
  /cb:
    get:
      consumes:
      - application/json
      description: cidに基づいて、グループの全ての掲示板を取得します。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 全てのグループ掲示板のリスト
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassBoard'
              type: array
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 全てのグループ掲示板を取得
      tags:
      - Class Board
    post:
      consumes:
      - multipart/form-data
      description: クラス掲示板を作成します。
      parameters:
      - description: Class board title
        in: formData
        name: title
        required: true
        type: string
      - description: Class board content
        in: formData
        name: content
        required: true
        type: string
      - description: Class ID
        in: formData
        name: cid
        required: true
        type: integer
      - description: User ID
        in: formData
        name: uid
        required: true
        type: integer
      - description: Is announced
        in: formData
        name: is_announced
        type: boolean
      - description: Upload image file
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Class board created successfully
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: クラス掲示板を作成
      tags:
      - Class Board
  /cb/{id}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板を削除します。
      parameters:
      - description: Class Board ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: User ID
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラス掲示板が正常に削除されました
          schema:
            type: string
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - Bearer: []
      summary: グループ掲示板を削除
      tags:
      - Class Board
    get:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板の詳細を取得します。
      parameters:
      - description: Class Board ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: グループ掲示板が取得されました
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: IDでグループ掲示板を取得
      tags:
      - Class Board
  /cb/{id}/{cid}/{uid}:
    patch:
      consumes:
      - application/json
      description: 指定されたIDのグループ掲示板の詳細を更新します。
      parameters:
      - description: Class Board ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class ID
        in: path
        name: cid
        required: true
        type: integer
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラス掲示板の更新
        in: body
        name: class_board_update
        required: true
        schema:
          $ref: '#/definitions/dto.ClassBoardUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: グループ掲示板が正常に更新されました
          schema:
            $ref: '#/definitions/models.ClassBoard'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: グループ掲示板を更新
      tags:
      - Class Board
  /cb/announced:
    get:
      consumes:
      - application/json
      description: cidに基づいて、公告されたグループの掲示板を取得します。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 公告されたグループ掲示板のリスト
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassBoard'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 公告されたグループ掲示板を取得
      tags:
      - Class Board
  /cb/search:
    get:
      consumes:
      - application/json
      description: タイトルに基づいてクラス掲示板を検索します。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: Title to search
        in: query
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassBoard'
              type: array
            type: array
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: No class boards found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: クラス掲示板を検索
      tags:
      - Class Board
  /cb/subscribe:
    get:
      description: クラス掲示板の更新を購読します。
      produces:
      - text/event-stream
      responses:
        "200":
          description: Class board updates subscribed
          schema:
            type: string
        "500":
          description: Error setting up SSE connection.
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラス掲示板の更新を購読
      tags:
      - Class Board
  /cc/checkSecretExists:
    get:
      consumes:
      - application/json
      description: 指定されたグループコードにシークレットがあるかどうかをチェックする。
      parameters:
      - description: Code to check
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: secretExists" "シークレットが存在します
          schema:
            type: boolean
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
      security:
      - Bearer: []
      summary: グループコードにシークレットが存在するかチェック
      tags:
      - Class Code
  /cc/verifyAndRequestAccess:
    get:
      consumes:
      - application/json
      description: クラスコードを確認し、必要な場合はシークレットもチェックしてから、申請者としてアクセス要求を提出します。
      parameters:
      - description: 確認するクラスコード
        in: query
        name: code
        required: true
        type: string
      - description: 必要な場合のクラスコードのシークレット
        in: query
        name: secret
        type: string
      - description: 役割を割り当ててアクセスを要求するユーザーID
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Access request submitted successfully with validation result.
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid or missing secret
          schema:
            type: string
        "404":
          description: Class code not found
          schema:
            type: string
        "500":
          description: Internal server error or error assigning role
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラスコードを確認してアクセスを要求する
      tags:
      - Class Code
  /cc/verifyClassCode:
    get:
      consumes:
      - application/json
      description: グループコードと、該当する場合はそのシークレットを確認する。また、指定されたユーザーに役割を割り当てる。
      parameters:
      - description: Code to verify
        in: query
        name: code
        required: true
        type: string
      - description: Secret for the code
        in: query
        name: secret
        type: string
      - description: User ID to assign role
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: グループコードが検証されました
          schema:
            type: string
        "400":
          description: 無効なリクエストです
          schema:
            type: string
        "401":
          description: シークレットが一致しません
          schema:
            type: string
        "404":
          description: コードが見つかりません
          schema:
            type: string
      security:
      - Bearer: []
      summary: グループコードとシークレットを検証＆ユーザーに役割を割り当てる
      tags:
      - Class Code
  /chat/create-room/{scheduleId}:
    post:
      consumes:
      - application/json
      description: チャットルームを作成する。
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Chat room created successfully.
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Failed to create chat room.
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: チャットルームを作成
      tags:
      - Chat Room
  /chat/dm/{senderId}/{receiverId}:
    delete:
      consumes:
      - application/json
      description: 特定のユーザー間のDM履歴を削除
      parameters:
      - description: Sender ID
        in: path
        name: senderId
        required: true
        type: string
      - description: Receiver ID
        in: path
        name: receiverId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Messages deleted successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: DM履歴を削除
      tags:
      - Direct Message
    get:
      consumes:
      - application/json
      description: 特定のユーザー間のDM履歴を取得
      parameters:
      - description: Sender ID
        in: path
        name: senderId
        required: true
        type: string
      - description: Receiver ID
        in: path
        name: receiverId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Messages fetched successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: DM履歴を取得
      tags:
      - Direct Message
    post:
      consumes:
      - application/json
      description: 特定のユーザーにDMを送信
      parameters:
      - description: Sender ID
        in: path
        name: senderId
        required: true
        type: string
      - description: Receiver ID
        in: path
        name: receiverId
        required: true
        type: string
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message sent successfully
          schema:
            type: string
      security:
      - Bearer: []
      summary: DMを送信
      tags:
      - Direct Message
  /chat/messages/{roomid}:
    get:
      consumes:
      - application/json
      description: チャットメッセージを取得する。
      parameters:
      - description: Room ID
        in: path
        name: roomid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "404":
          description: Chat room not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: チャットメッセージを取得
      tags:
      - Chat Room
  /chat/room/{scheduleId}:
    delete:
      consumes:
      - application/json
      description: チャットルームを削除する。
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Chat room deleted successfully.
          schema:
            type: string
      security:
      - Bearer: []
      summary: チャットルームを削除
      tags:
      - Chat Room
    post:
      consumes:
      - multipart/form-data
      description: チャットルームにメッセージを投稿する。
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: integer
      - description: User ID
        in: formData
        name: user
        required: true
        type: string
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Message posted successfully.
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: チャットルームに投稿
      tags:
      - Chat Room
  /chat/room/{scheduleId}/{userId}:
    get:
      consumes:
      - text/html
      description: チャットルームをハンドルする。
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: チャットルームが正常にハンドルされました
          schema:
            type: string
      security:
      - Bearer: []
      summary: チャットルームをハンドル
      tags:
      - Chat Room
  /chat/stream/{scheduleId}:
    get:
      consumes:
      - application/json
      description: チャットをストリームする。
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: チャットをストリーム
      tags:
      - Chat Room
  /cl/{cid}:
    get:
      consumes:
      - application/json
      description: 指定されたIDを持つクラスの情報を取得します。
      parameters:
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功時、クラスの情報を返します
          schema:
            $ref: '#/definitions/models.Class'
        "400":
          description: 'error: リクエストが不正です'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'error: クラスが見つかりません'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: サーバーエラーが発生しました'
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: クラスの情報を取得します
      tags:
      - Class
  /cl/{uid}/{cid}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDを持つクラスを削除します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message: クラスが正常に削除されました'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: 認証エラー'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: サーバー内部エラー'
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: クラスを削除します
      tags:
      - Class
    patch:
      consumes:
      - multipart/form-data
      description: 指定されたIDを持つクラスの情報を更新します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      - description: クラス名
        in: formData
        name: name
        type: string
      - description: 参加制限人数
        in: formData
        name: limitation
        type: integer
      - description: クラス説明
        in: formData
        name: description
        type: string
      - description: クラス画像
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'message: クラスが正常に更新されました'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: 不正なリクエストのエラーメッセージ'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: 認証エラー'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: サーバー内部エラー'
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: クラス情報を更新します
      tags:
      - Class
  /cl/create:
    post:
      consumes:
      - multipart/form-data
      description: 名前、定員、説明、画像URL、作成者のUIDを持つ新しいクラスを作成します。画像はオプショナルです。
      parameters:
      - description: クラスの名前
        in: formData
        name: name
        required: true
        type: string
      - description: クラスの定員数
        in: formData
        name: limitation
        type: integer
      - description: クラスの説明
        in: formData
        name: description
        type: string
      - description: クラスを作成するユーザーのUID
        in: formData
        name: uid
        required: true
        type: integer
      - description: クラス加入暗証番号
        in: formData
        name: secret
        type: string
      - description: クラスの画像
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: 'message: クラスが正常に作成されました'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: 不正なリクエストのエラーメッセージ'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: サーバー内部エラー'
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: 新しいクラスを作成します
      tags:
      - Class
  /cs:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDの全てのクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 全てのクラススケジュールを取得
      tags:
      - Class Schedule
    post:
      consumes:
      - application/json
      description: 新しいクラススケジュールを作成する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: User ID
        in: query
        name: uid
        required: true
        type: integer
      - description: Class schedule to create
        in: body
        name: classSchedule
        required: true
        schema:
          $ref: '#/definitions/dto.ClassScheduleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に作成されました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラススケジュールを作成
      tags:
      - Class Schedule
  /cs/{id}:
    delete:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを削除する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: User ID
        in: query
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に削除されました
          schema:
            type: string
        "400":
          description: 無効なID形式です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラススケジュールを削除
      tags:
      - Class Schedule
    get:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを取得する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが見つかりました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: 無効なID形式です
          schema:
            type: string
        "404":
          description: クラススケジュールが見つかりません
          schema:
            type: string
      security:
      - Bearer: []
      summary: IDでクラススケジュールを取得
      tags:
      - Class Schedule
    patch:
      consumes:
      - application/json
      description: 指定されたIDのクラススケジュールを更新する。
      parameters:
      - description: Class schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: User ID
        in: query
        name: uid
        required: true
        type: integer
      - description: Class schedule to update
        in: body
        name: classSchedule
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateClassScheduleDTO'
      produces:
      - application/json
      responses:
        "200":
          description: クラススケジュールが正常に更新されました
          schema:
            $ref: '#/definitions/models.ClassSchedule'
        "400":
          description: リクエストが不正です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラススケジュールを更新
      tags:
      - Class Schedule
  /cs/date:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDと日付のクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      - description: Date
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 指定された日付のクラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "400":
          description: 日付が必要です
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: 日付でクラススケジュールを取得
      tags:
      - Class Schedule
  /cs/live:
    get:
      consumes:
      - application/json
      description: 指定されたクラスIDのライブ中のクラススケジュールを取得する。
      parameters:
      - description: Class ID
        in: query
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ライブ中のクラススケジュールが見つかりました
          schema:
            items:
              items:
                $ref: '#/definitions/models.ClassSchedule'
              type: array
            type: array
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: ライブ中のクラススケジュールを取得
      tags:
      - Class Schedule
  /cu/{uid}/{cid}/info:
    get:
      consumes:
      - application/json
      description: 特定のユーザーIDに基づいて、クラスユーザー情報を取得します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/dto.ClassMemberDTO'
        "400":
          description: 無効なリクエスト
          schema:
            type: string
        "404":
          description: 情報が見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: ユーザーに関連するクラスユーザー情報を取得
      tags:
      - Class User
  /cu/{uid}/{cid}/remove:
    delete:
      consumes:
      - application/json
      description: 指定したユーザーIDとクラスIDに基づいて、ユーザーをクラスから削除します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            type: string
        "400":
          description: 無効なリクエスト
          schema:
            type: string
        "404":
          description: ユーザーまたはクラスが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: ユーザーをクラスから削除します。
      tags:
      - Class User
  /cu/{uid}/{cid}/rename:
    put:
      consumes:
      - application/json
      description: 特定のユーザーIDとグループIDに対してユーザーの名前を更新します。
      operationId: update-user-name
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: Class ID
        in: path
        name: cid
        required: true
        type: integer
      - description: 新しいニックネーム
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserNameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: ユーザーの名前を更新します。
      tags:
      - Class User
  /cu/{uid}/{cid}/role/{roleName}:
    patch:
      consumes:
      - application/json
      description: Change the role of a user based on user ID and class ID.
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: Class ID
        in: path
        name: cid
        required: true
        type: integer
      - description: Role Name
        in: path
        name: roleName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User or class not found
          schema:
            type: string
      security:
      - Bearer: []
      summary: Change a user's role.
      tags:
      - Class User
  /cu/{uid}/{cid}/toggle-favorite:
    patch:
      consumes:
      - application/json
      description: ユーザーIDとクラスIDに基づいて、お気に入りのクラスを切り替えます。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            type: string
        "400":
          description: 無効なリクエスト
          schema:
            type: string
        "404":
          description: ユーザーまたはクラスが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: お気に入りのクラスを切り替えます
      tags:
      - Class User
  /cu/{uid}/classes:
    get:
      consumes:
      - application/json
      description: 特定のユーザーが参加している全てのクラスの情報を取得します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            items:
              $ref: '#/definitions/models.Class'
            type: array
      security:
      - Bearer: []
      summary: ユーザーが参加しているクラスのリストを取得
      tags:
      - Class User
  /cu/{uid}/classes/by-role:
    get:
      consumes:
      - application/json
      description: ユーザーIDとロール名に基づいて、ユーザーが所属しているクラスの情報を取得します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: ロール名
        in: query
        name: role
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            items:
              $ref: '#/definitions/dto.UserClassInfoDTO'
            type: array
        "400":
          description: 無効なリクエスト
          schema:
            type: string
        "404":
          description: クラスが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: ユーザーとロールに関連するクラス情報を取得
      tags:
      - Class User
  /cu/{uid}/classes/search:
    get:
      consumes:
      - application/json
      description: 指定されたユーザーIDとクラス名に基づいて、クラスを検索します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラス名
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully found classes
          schema:
            items:
              $ref: '#/definitions/dto.UserClassInfoDTO'
            type: array
        "400":
          description: Invalid Request
          schema:
            type: string
        "404":
          description: No classes found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: クラス名でクラスを検索します
      tags:
      - Class User
  /cu/{uid}/favorite-classes:
    get:
      consumes:
      - application/json
      description: ユーザーIDに基づいて、お気에入りに設定されたクラスの情報を取得します。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            items:
              $ref: '#/definitions/dto.UserClassInfoDTO'
            type: array
        "400":
          description: 無効なリクエスト
          schema:
            type: string
        "404":
          description: クラスが見つかりません
          schema:
            type: string
        "500":
          description: サーバーエラーが発生しました
          schema:
            type: string
      security:
      - Bearer: []
      summary: お気に入りのクラス情報を取得
      tags:
      - Class User
  /cu/class/{cid}/members:
    get:
      consumes:
      - application/json
      description: 指定されたcidのクラスに所属しているメンバーの情報を取得します。
      parameters:
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      - description: ロール名
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功時、クラスメンバーの情報を返します
          schema:
            items:
              $ref: '#/definitions/dto.ClassMemberDTO'
            type: array
        "400":
          description: 無効なクラスIDが指定された場合のエラーメッセージ
          schema:
            additionalProperties: true
            type: object
        "500":
          description: サーバー内部エラー
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: クラスメンバーの情報を取得します
      tags:
      - Class User
  /live/screen_share/{uid}/{cid}:
    get:
      consumes:
      - application/json
      description: 特定のクラスのスクリーン共有情報を取得します。ユーザーがそのクラスのメンバーである必要があります。
      parameters:
      - description: ユーザーID
        in: path
        name: uid
        required: true
        type: integer
      - description: クラスID
        in: path
        name: cid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: スクリーン共有情報を取得
      tags:
      - Live Class
  /u/{userID}/applying-classes:
    get:
      consumes:
      - application/json
      description: ユーザーが申し込んだクラスを取得します。
      parameters:
      - description: ユーザーID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ClassUser'
            type: array
        "400":
          description: 無効なユーザーID
          schema:
            type: string
        "404":
          description: 申請中のクラスが見つかりません
          schema:
            type: string
        "500":
          description: 内部サーバーエラー
          schema:
            type: string
      security:
      - Bearer: []
      summary: 申し込んだクラスを取得
      tags:
      - User
  /u/{userID}/delete:
    delete:
      consumes:
      - application/json
      description: ユーザーIDによってサービスからユーザーを削除します。
      parameters:
      - description: ユーザーID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'message: ユーザーが正常に削除されました。'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: 不正なリクエスト、無効なユーザーIDです。'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'error: ユーザーが見つかりません。'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: サーバー内部エラーです。'
          schema:
            additionalProperties: true
            type: object
      summary: ユーザー削除
      tags:
      - User
  /u/search:
    get:
      consumes:
      - application/json
      description: 名前でユーザーを検索します。
      parameters:
      - description: ユーザー名
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Nameパラメーターが必要です
          schema:
            type: string
        "500":
          description: サーバーエラー
          schema:
            type: string
      summary: 名前でユーザーを検索
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
