// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/example/helloworld": {
            "get": {
                "description": "do ping",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "example"
                ],
                "summary": "ping example",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gc/checkSecretExists": {
            "post": {
                "description": "指定されたグループコードにシークレットがあるかどうかをチェックする。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group_code"
                ],
                "summary": "グループコードにシークレットが存在するかチェック",
                "parameters": [
                    {
                        "description": "Check Secret",
                        "name": "group_code_check_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupCodeCheckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "secretExists\" \"シークレットが存在します",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "error\" \"無効なリクエストです",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error\" \"コードが見つかりません",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/gc/verifyGroupCode": {
            "post": {
                "description": "グループコードと、該当する場合はそのシークレットを確認する。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "group_code"
                ],
                "summary": "グループコードとシークレットを検証",
                "parameters": [
                    {
                        "description": "グループコードの確認",
                        "name": "group_code_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroupCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\" \"グループコードが検証されました",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error\" \"無効なリクエストです",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "error\" \"シークレットが一致しません",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error\" \"コードが見つかりません",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.GroupCodeCheckRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "dto.GroupCodeRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
